<ELine Option=_chartOption style="height: 500px;"></ELine>

@inject HttpClient HttpClient

@code {
    [Parameter]
    public TimeSeriesModel? TimeSeries { get; set; }

    private EChartsOption<OptionsLine.Line>? _chartOption;
    private string? _rawJsTooltipFormatter;
    private string? _rawJsYAxisLabelFormatter;

    protected override async Task OnInitializedAsync()
    {
        if (TimeSeries is null)
            return;

        _rawJsTooltipFormatter = (await HttpClient.GetStringAsync("eChartsTooltipFormatter.js")).Replace("\"use strict\";", "");
        _rawJsYAxisLabelFormatter = (await HttpClient.GetStringAsync("eChartsYAxisLabelFormatter.js")).Replace("\"use strict\";", "");

        _chartOption = new()
            {
                Animation = true,
                Legend = new()
                {
                    Top = 10,
                    Data = new[] { "Insta Buy Price", "Insta Sell Price", "Insta Buy Volume", "Insta Sell Volume" },
                    TextStyle = new() { Color = "#ffffff" }
                },
                Tooltip = new()
                {
                    Trigger = TooltipTrigger.Axis,
                    AxisPointer = new() { Type = AxisPointerType.Shadow },
                    BorderColor = "#ccc",
                    Padding = 10,
                    Formatter = new JFunc() { RAW = _rawJsTooltipFormatter }
                },
                AxisPointer = new()
                {
                    Link = new() { XAxisIndex = "all" },
                    Label = new() { BackgroundColor = "#ffffff" }
                },
                Grid = [
                    new() {Left = "10%", Right = "8%", Height = "40%"},
                    new() {Left = "10%", Right = "8%", Top = "65%", Height = "10%"},
                    new() {Left = "10%", Right = "8%", Top = "75%", Height = "10%"},
                ],
                XAxis = [
                    new() {
                        Type = AxisType.Category,
                        BoundaryGap = false
                    },
                    new()
                    {
                        Type = AxisType.Category,
                        GridIndex = 1,
                        AxisLabel = new(){ Show = false },
                        BoundaryGap = false
                    },
                    new()
                    {
                        Type = AxisType.Category,
                        GridIndex = 2,
                        AxisLabel = new() { Show = false },
                        BoundaryGap = false
                    }],
                YAxis = [
                    new(){
                        Scale = true,
                        AxisLabel = new(){ Formatter = new JFunc() { RAW = _rawJsYAxisLabelFormatter } }
                    },
                    new(){
                        Scale = true, GridIndex = 1,
                        SplitNumber = 2,
                        SplitLine = new(){ Show = false },
                        AxisLabel = new(){ Formatter = new JFunc() { RAW = _rawJsYAxisLabelFormatter } }
                    },
                    new(){
                        Scale = true,
                        GridIndex = 2,
                        SplitNumber = 2,
                        SplitLine = new(){ Show = false },
                        AxisLabel = new(){ Formatter = new JFunc() { RAW = _rawJsYAxisLabelFormatter } },
                        Inverse = true
                    }],
                DataZoom = [
                    new DataZoom("inside")
                    {
                        XAxisIndex = new[] { 0, 1, 2 },
                        Start = 0,
                        End = 100,
                    },
                    new DataZoom("slider")
                    {
                        XAxisIndex = new[] { 0, 1, 2 },
                        Start = 0,
                        End = 100,
                    }],
                Series = [
                    new OptionsLine.Line() {
                        Name = "Insta Buy Price",
                        Type = "line",
                        ConnectNulls = true,
                        LineStyle = new(){ Color = "#00ff00" }
                    },
                    new OptionsLine.Line() {
                        Name = "Insta Sell Price",
                        Type = "line",
                        ConnectNulls = true,
                        LineStyle = new(){ Color = "#ff0000" }
                    },
                     new OptionsBar.Bar() {
                        Name = "Insta Buy Volume",
                        Type = "bar",
                        ItemStyle = new() { Color = "#00bcd4" },
                        XAxisIndex = 1,
                        YAxisIndex = 1,
                    },
                    new OptionsBar.Bar() {
                        Name = "Insta Sell Volume",
                        Type = "bar",
                        ItemStyle = new() { Color = "#f57c00" },
                        XAxisIndex = 2,
                        YAxisIndex = 2,
                    }]
            };

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        if (_chartOption is null || TimeSeries?.Data is null)
            return;

        foreach (XAxis xAxis in _chartOption.XAxis)
            xAxis.Data = TimeSeries.Data.Select(timeSeries => NumericUtility.FormatSecondsToRelativeDateTime(timeSeries.Timestamp));

        (_chartOption.Series[0] as OptionsLine.Line)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.AvgHighPrice);
        (_chartOption.Series[1] as OptionsLine.Line)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.AvgLowPrice);
        (_chartOption.Series[2] as OptionsBar.Bar)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.HighPriceVolume);
        (_chartOption.Series[3] as OptionsBar.Bar)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.LowPriceVolume);

        StateHasChanged();
        base.OnParametersSet();
    }
}
