<div class="grid gap-2 m-[10px] w-[200px]">
    <RadzenText Style="font-size: 14px;font-weight: 600; margin-top: 5px;" Text="Filter" />
    <RadzenDropDown @bind-Value=TimeDirection
                    Data=@(Enum.GetValues(typeof(TimeDirection)).Cast<TimeDirection>().Select(timeDirection => timeDirection)) />

    <div class="flex gap-6 justify-around">
        <RadzenNumeric @bind-Value=TimeNumber ShowUpDown=true />
        <RadzenDropDown @bind-Value=TimeUnit
                        Data=@(Enum.GetValues(typeof(TimeUnit)).Cast<TimeUnit>().Select(timeUnit => timeUnit)) />
    </div>

    <div class="flex gap-[85px] justify-around mt-[14px]">
        <RadzenButton Style="background-color: #3b9fd5;" Text=Clear Click=ClearFilter />
        <RadzenButton Text=Apply Click=ApplyFilter />
    </div>
</div>

@code {
    [Parameter]
    public long? FilterValue { get; set; }
    [Parameter]
    public EventCallback<long?> FilterValueChanged { get; set; }

    [Parameter]
    public TimeDirection TimeDirection { get; set; }
    [Parameter]
    public EventCallback<TimeDirection> TimeDirectionChanged { get; set; }

    [Parameter]
    public long? TimeNumber { get; set; }
    [Parameter]
    public EventCallback<long?> TimeNumberChanged { get; set; }

    [Parameter]
    public TimeUnit TimeUnit { get; set; }
    [Parameter]
    public EventCallback<TimeUnit> TimeUnitChanged { get; set; }

    private void ClearFilter()
    {
        TimeDirection = TimeDirection.Before;
        TimeNumber = null;
        TimeUnit = TimeUnit.Hours;
        UpdateFilterValues();
    }

    private void ApplyFilter() => UpdateFilterValues();

    private void UpdateFilterValues()
    {
        FilterValueChanged.InvokeAsync(TimeNumber * (int)TimeUnit);
        TimeDirectionChanged.InvokeAsync(TimeDirection);
        TimeNumberChanged.InvokeAsync(TimeNumber);
        TimeUnitChanged.InvokeAsync(TimeUnit);
    }
}
