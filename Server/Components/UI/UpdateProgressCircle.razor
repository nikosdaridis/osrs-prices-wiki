@implements IDisposable

@inject PeriodicExecutorFactory PeriodicExecutorFactory
@inject ServerService ServerService
@inject TooltipService TooltipService

<RadzenProgressBarCircular Style="font-size: 11px; align-self: center;" ShowValue=true Size=ProgressBarCircularSize.Small
                           ProgressBarStyle=ProgressBarStyle.Primary Mode=ProgressBarMode.Determinate
                           Value=@_scaledElapsedSeconds MouseEnter=@(elem => TooltipService.Open(elem, "Next Update in", _tooltipOptionsLeft))>
    <Template>@(60 - Math.Floor(_scaledElapsedSeconds * 0.6))</Template>
</RadzenProgressBarCircular>

@code {
    private DateTime? _lastUpdate;
    private PeriodicExecutor? _periodicExecutor;
    private double _scaledElapsedSeconds;
    private TooltipOptions _tooltipOptionsLeft = new() { Position = TooltipPosition.Left };

    /// <summary>
    /// Subscribes to data updated event and starts periodic executor
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _lastUpdate = ServerService.LastUpdate;
        ServerService.OnDataUpdated += UpdateLastUpdateDateTime;

        _periodicExecutor = PeriodicExecutorFactory.Create(200);
        _periodicExecutor.JobExecuted += HandleJobExecuted;
        _periodicExecutor.StartExecuting();
    }

    /// <summary>
    /// Updates last update date time
    /// </summary>
    private void UpdateLastUpdateDateTime()
    {
        _lastUpdate = ServerService.LastUpdate;
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Updates scaled elapsed seconds and refreshes the component
    /// </summary>
    private void HandleJobExecuted(object? sender, JobExecutedEventArgs e)
    {
        _scaledElapsedSeconds = Math.Min(100, Math.Round((DateTime.Now - (_lastUpdate ?? DateTime.Now)).TotalSeconds / 60 * 100));
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Unsubscribes from data updated event and disposes periodic executor
    /// </summary>
    public void Dispose()
    {
        ServerService.OnDataUpdated -= UpdateLastUpdateDateTime;

        if (_periodicExecutor is null)
            return;

        _periodicExecutor.JobExecuted -= HandleJobExecuted;
        _periodicExecutor.Dispose();
    }
}
