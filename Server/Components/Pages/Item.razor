@page "/{Id:int}/{Name?}"

@implements IDisposable

@inject PeriodicExecutorFactory PeriodicExecutorFactory
@inject ServerService ServerService
@inject NavigationManager NavigationManager

<PageTitle>@_item?.Name - OSRS Live GE Price Utilities</PageTitle>

<NavigationHeader />

<h1>@_item?.Name</h1>

@if (_item is not null && _activeTimeSeries is not null)
{
    <ItemChart TimeSeries=_activeTimeSeries />
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private PeriodicExecutor? _periodicExecutor;
    private ItemModel? _item;
    private Dictionary<string, TimeSeriesModel?> _timeSeries = new() { { "5m", new() }, { "1h", new() }, { "6h", new() }, { "24h", new() } };
    private TimeSeriesModel? _activeTimeSeries;


    /// <summary>
    /// Subscribes to data updated event
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        ServerService.OnDataUpdated += UpdateItem;
    }

    /// <summary>
    /// Sets item and starts periodic executor for echarts time series
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (ServerService.GetCachedItems() is null or [])
            await ServerService.GetLatestItemsAsync();

        _item = ServerService.GetCachedItem(Id);

        if (_item is null)
            NavigationManager.NavigateTo("/");

        _periodicExecutor?.Dispose();
        _periodicExecutor = PeriodicExecutorFactory.Create(60_000);
        _periodicExecutor.JobExecuted += HandleJobExecuted;
        _periodicExecutor.StartExecuting();

        StateHasChanged();
    }

    /// <summary>
    /// Updates item when data is updated
    /// </summary>
    private void UpdateItem()
    {
        _item = ServerService.GetCachedItem(Id);
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Updates time series
    /// </summary>
    private void HandleJobExecuted(object? sender, JobExecutedEventArgs e)
    {
        InvokeAsync(async () =>
           {
               _timeSeries["5m"] = await ServerService.GetTimeseriesAsync("5m", _item!.Id);
               _activeTimeSeries = _timeSeries["5m"];
               StateHasChanged();
           });
    }

    /// <summary>
    /// Unsubscribes from data updated event and disposes periodic executor
    /// </summary>
    public void Dispose()
    {
        ServerService.OnDataUpdated -= UpdateItem;

        if (_periodicExecutor is null)
            return;

        _periodicExecutor.JobExecuted -= HandleJobExecuted;
        _periodicExecutor.Dispose();
    }
}
