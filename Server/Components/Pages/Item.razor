@page "/{Id:int}/{Name?}"

@implements IDisposable

@inject PeriodicExecutorFactory PeriodicExecutorFactory
@inject ServerService ServerService
@inject NavigationManager NavigationManager

<PageTitle>@_item?.Name - OSRS Live GE Price Utilities</PageTitle>

<ItemDetails Item=_item />

<RadzenDropDown TValue=string Value=@_activeTimeSeriesInterval Data=@_timeSeries.Keys Change=@((args) => OnTimeSeriesPeriodChanged(args.ToString()))
                class="float-right mr-[8vw] w-[6rem]" />

@if (_item is not null && _activeTimeSeries is not null)
{
    <ItemChart TimeSeries=_activeTimeSeries ActiveTimeSeriesInterval=@_activeTimeSeriesInterval />
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public string? Name { get; set; }

    private PeriodicExecutor? _periodicExecutor;
    private ItemModel? _item;
    private Dictionary<string, TimeSeriesModel?> _timeSeries = new() { { "5m", new() }, { "1h", new() }, { "6h", new() }, { "24h", new() } };
    private TimeSeriesModel? _activeTimeSeries;
    private string _activeTimeSeriesInterval = "5m";
    private int _timeSeriesUpdateInterval = 60_000;

    /// <summary>
    /// Subscribes to data updated event
    /// </summary>
    protected override void OnInitialized()
    {
        base.OnInitialized();

        ServerService.OnDataUpdated += UpdateItem;
    }

    /// <summary>
    /// Sets item and starts periodic executor for echarts time series
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (ServerService.GetCachedItems() is null or [])
            await ServerService.GetLatestItemsAsync();

        _item = ServerService.GetCachedItem(Id);

        if (_item is null)
            NavigationManager.NavigateTo("/");

        ConfigureAndStartExecutor();

        StateHasChanged();
    }

    /// <summary>
    /// Updates item when data is updated
    /// </summary>
    private void UpdateItem()
    {
        _item = ServerService.GetCachedItem(Id);
        InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Configures and starts periodic executor
    /// </summary>
    public void ConfigureAndStartExecutor()
    {
        _periodicExecutor?.Dispose();
        _periodicExecutor = PeriodicExecutorFactory.Create(_timeSeriesUpdateInterval);
        _periodicExecutor.JobExecuted += (sender, e) => HandleJobExecuted(sender, e, _activeTimeSeriesInterval);
        _periodicExecutor.StartExecuting();
    }

    /// <summary>
    /// Handles job executed event and updates time series
    /// </summary>
    private void HandleJobExecuted(object? sender, JobExecutedEventArgs e, string timeSeriesKey)
    {
        InvokeAsync(async () =>
        {
            _timeSeries[timeSeriesKey] = await ServerService.GetTimeseriesAsync(timeSeriesKey, _item!.Id);
            _activeTimeSeries = _timeSeries[timeSeriesKey];

            StateHasChanged();
        });
    }

    /// <summary>
    /// Updates time series when period is changed
    /// </summary>
    private void OnTimeSeriesPeriodChanged(string? newPeriod)
    {
        if (string.IsNullOrWhiteSpace(newPeriod) || string.Equals(_activeTimeSeriesInterval, newPeriod))
            return;

        _activeTimeSeriesInterval = newPeriod;

        _timeSeriesUpdateInterval = _activeTimeSeriesInterval switch
        {
            "5m" => 60_000,
            "1h" => 300_000,
            "6h" => 1_800_000,
            "24h" => 3_600_000,
            _ => 60_000
        };

        ConfigureAndStartExecutor();
    }

    /// <summary>
    /// Unsubscribes from data updated event and disposes periodic executor
    /// </summary>
    public void Dispose()
    {
        ServerService.OnDataUpdated -= UpdateItem;

        if (_periodicExecutor is null)
            return;

        foreach (string timeSeriesKey in _timeSeries.Keys)
            _periodicExecutor.JobExecuted -= new((sender, e) => HandleJobExecuted(sender, e, timeSeriesKey));

        _periodicExecutor.Dispose();
    }
}
