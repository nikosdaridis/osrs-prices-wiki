@implements IDisposable

@inject IWebHostEnvironment Environment

<ELine Option=_chartOption class="mt-[4rem] h-[500px] md:mt-[2rem]" />

@code {
    [Parameter]
    public TimeSeriesModel? TimeSeries { get; set; }

    [Parameter]
    public string ActiveTimeSeriesInterval { get; set; } = "5m";

    [Parameter]
    public IJSRuntime? JSRuntime { get; set; }

    private DotNetObjectReference<Chart>? _itemChartRef;
    private EChartsOption<OptionsLine.Line>? _chartOption;
    private (DateTime? DateTime, TimeZoneInfo? TimeZone) _client;
    private (double Start, double End) _dataZoomInfo = (0, 100);
    private (string? Tooltip, string? YAxisLabel) _rawJSFormatters;

    /// <summary>
    /// Initializes chart
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (TimeSeries is null)
            return;

        _itemChartRef = DotNetObjectReference.Create(this);

        if (JSRuntime is not null)
            await JSRuntime.InvokeVoidAsync("eChartsInterop.initializeDataZoomHandler", _itemChartRef);

        _rawJSFormatters.Tooltip = await LoadRawJSFileAsync("eChartsTooltipFormatter.js");
        _rawJSFormatters.YAxisLabel = await LoadRawJSFileAsync("eChartsYAxisLabelFormatter.js");

        _chartOption = new()
            {
                Animation = true,
                TextStyle = new() { Color = "#f6f7fa", FontFamily = "Poppins" },
                Legend = new()
                {
                    Data = new[]
                    {
                        new { Name = "Insta Buy Price", Icon = "circle" },
                        new { Name = "Insta Sell Price", Icon = "circle" },
                        new { Name = "Insta Buy Volume", Icon = "roundRect" },
                        new { Name = "Insta Sell Volume", Icon = "roundRect" }
                    },
                    TextStyle = new() { Color = "#f6f7fa" },
                    InactiveColor = "#cccccc",
                    ItemGap = 30
                },
                Tooltip = new()
                {
                    Trigger = TooltipTrigger.Axis,
                    AxisPointer = new() { Type = AxisPointerType.Shadow },
                    BorderColor = "#cccccc",
                    Padding = 10,
                    Formatter = new JFunc() { RAW = _rawJSFormatters.Tooltip }
                },
                AxisPointer = new()
                {
                    Link = new() { XAxisIndex = "all" }
                },
                Grid = [
                    new() {Left = "10%", Right = "10%", Top = "14%", Height = "40%"},
                    new() {Left = "10%", Right = "10%", Top = "65%", Height = "10%"},
                    new() {Left = "10%", Right = "10%", Top = "75%", Height = "10%"},
                ],
                XAxis = [
                    new() {
                        Type = AxisType.Category,
                        BoundaryGap = true
                    },
                    new()
                    {
                        Type = AxisType.Category,
                        GridIndex = 1,
                        AxisLabel = new(){ Show = false },
                        BoundaryGap = true
                    },
                    new()
                    {
                        Type = AxisType.Category,
                        GridIndex = 2,
                        AxisLabel = new() { Show = false },
                        BoundaryGap = true,
                    }],
                YAxis = [
                    new(){
                        Scale = true,
                        AxisLabel = new(){ Formatter = new JFunc() { RAW = _rawJSFormatters.YAxisLabel } },
                        Type = AxisType.Value,
                        BoundaryGap = true
                    },
                    new(){
                        Scale = true, GridIndex = 1,
                        SplitNumber = 2,
                        SplitLine = new(){ Show = false },
                        AxisLabel = new(){ Formatter = new JFunc() { RAW = _rawJSFormatters.YAxisLabel } },
                        Type = AxisType.Value,
                        BoundaryGap = true
                    },
                    new(){
                        Scale = true,
                        GridIndex = 2,
                        SplitNumber = 2,
                        SplitLine = new(){ Show = false },
                        AxisLabel = new(){ Formatter = new JFunc() { RAW = _rawJSFormatters.YAxisLabel } },
                        Type = AxisType.Value,
                        BoundaryGap = true,
                        Inverse = true
                    }],
                DataZoom = [
                    new DataZoomInside
                    {
                        XAxisIndex = new[] { 0, 1, 2 },
                        Start = _dataZoomInfo.Start,
                        End = _dataZoomInfo.End,
                        Realtime = true,
                    },
                    new DataZoomSlider
                    {
                        XAxisIndex = new[] { 0, 1, 2 },
                        Start = _dataZoomInfo.Start,
                        End = _dataZoomInfo.End,
                        Realtime = true,
                        TextStyle = new() { Color = "#f6f7fa" }
                    }],
                Series = [
                    new OptionsLine.Line() {
                        Name = "Insta Buy Price",
                        Type = "line",
                        ConnectNulls = true,
                        LineStyle = new(){ Color = "#22bb33" },
                        ItemStyle = new(){ Color = "#22bb33" },
                        ShowSymbol = false
                    },
                    new OptionsLine.Line() {
                        Name = "Insta Sell Price",
                        Type = "line",
                        ConnectNulls = true,
                        LineStyle = new(){ Color = "#dd1144" },
                        ItemStyle = new(){ Color = "#dd1144" },
                        ShowSymbol = false
                    },
                     new OptionsBar.Bar() {
                        Name = "Insta Buy Volume",
                        Type = "bar",
                        ItemStyle = new() { Color = "#00b3e1" },
                        XAxisIndex = 1,
                        YAxisIndex = 1
                    },
                    new OptionsBar.Bar() {
                        Name = "Insta Sell Volume",
                        Type = "bar",
                        ItemStyle = new() { Color = "#e86100" },
                        XAxisIndex = 2,
                        YAxisIndex = 2
                    }]
            };
    }

    /// <summary>
    /// Updates chart option with time series data
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        await UpdateClientTimeInfo();
        UpdateSeries();
        UpdateDataZoom();

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Updates chart dataZoom start and end values
    /// </summary>
    [JSInvokable]
    public void HandleDataZoom(double start, double end)
    {
        _dataZoomInfo = (start, end);
        UpdateDataZoom();
    }

    /// <summary>
    /// Loads and formats raw JavaScript file
    /// </summary>
    private async Task<string> LoadRawJSFileAsync(string fileName) =>
           (await File.ReadAllTextAsync(Path.Combine(Environment.WebRootPath, "JavaScript", fileName))).Replace("\"use strict\";", "");

    /// <summary>
    /// Updates client local time and time zone
    /// </summary>
    private async Task UpdateClientTimeInfo()
    {
        if (JSRuntime is null)
            return;

        (DateTime? datetime, TimeZoneInfo? timezone) = await DateTimeUtility.GetClientLocalTimeAsync(JSRuntime);

        if (datetime is not null)
            _client.DateTime = datetime.Value;

        if (timezone is not null)
            _client.TimeZone = timezone;
    }

    /// <summary>
    /// Updates chart series with current time series data
    /// </summary>
    private void UpdateSeries()
    {
        if (_chartOption?.DataZoom is null || TimeSeries?.Data is null)
            return;

        foreach (XAxis xAxis in _chartOption.XAxis)
            xAxis.Data = TimeSeries.Data.Select(timeSeries => NumericUtility.FormatSecondsToRelativeDateTime(
                timeSeries.Timestamp, _client, ActiveTimeSeriesInterval));

        (_chartOption.Series[0] as OptionsLine.Line)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.AvgHighPrice);
        (_chartOption.Series[1] as OptionsLine.Line)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.AvgLowPrice);
        (_chartOption.Series[2] as OptionsBar.Bar)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.HighPriceVolume);
        (_chartOption.Series[3] as OptionsBar.Bar)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.LowPriceVolume);
    }

    /// <summary>
    /// Updates chart options with dataZoom values
    /// </summary>
    private void UpdateDataZoom()
    {
        if (_chartOption?.DataZoom is null)
            return;

        foreach (dynamic dataZoom in _chartOption.DataZoom)
        {
            ((dynamic)dataZoom).Start = _dataZoomInfo.Start;
            ((dynamic)dataZoom).End = _dataZoomInfo.End;
        }
    }

    /// <summary>
    /// Disposes chart reference
    /// </summary>
    public void Dispose() =>
        _itemChartRef?.Dispose();
}
