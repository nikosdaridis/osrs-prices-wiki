<div class="grid grid-cols-2 gap-4">
    <h4 @ref=_labelElement @onmouseenter=HandleLabelMouseEnter>@Label</h4>
    <h4 @ref=_valueElement @onmouseenter=HandleValueMouseEnter style=@Style>@(ValueFormatter?.Invoke(Value ?? string.Empty) ?? Value?.ToString() ?? string.Empty)</h4>
</div>

@code {
    [Parameter]
    public TooltipService? TooltipService { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? LabelTooltip { get; set; }

    [Parameter]
    public object? Value { get; set; }

    [Parameter]
    public Func<object, string>? ValueFormatter { get; set; }

    [Parameter]
    public bool ValueTooltip { get; set; } = true;

    [Parameter]
    public Func<object, string>? ValueTooltipFormatter { get; set; }

    [Parameter]
    public string? Style { get; set; }

    private ElementReference _labelElement, _valueElement;

    private TooltipOptions _tooltipOptions = new() { Position = TooltipPosition.Bottom, Duration = 10000 };

    /// <summary>
    /// Handles mouse enter event on label
    /// </summary>
    private void HandleLabelMouseEnter() =>
            TooltipService?.Open(_labelElement, LabelTooltip, _tooltipOptions);

    /// <summary>
    /// Handles mouse enter event on value
    /// </summary>
    private void HandleValueMouseEnter()
    {
        if (!ValueTooltip)
            return;

        string? tooltipValue;

        if (ValueTooltipFormatter is null && Value is IConvertible convertibleValue && Math.Abs(Convert.ToInt64(Value)) >= 1_000)
            tooltipValue = Convert.ToInt64(convertibleValue).ToString("N0");
        else
            tooltipValue = ValueTooltipFormatter?.Invoke(Value ?? string.Empty) ?? string.Empty;

        if (!string.IsNullOrWhiteSpace(tooltipValue))
            TooltipService?.Open(_valueElement, tooltipValue, _tooltipOptions);
    }
}
