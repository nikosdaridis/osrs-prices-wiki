@inject NavigationManager NavigationManager
@inject TooltipService TooltipService
@inject ServerService ServerService

<div class="shadow-10 flex justify-between bg-[var(--primary-color)] p-3">
    <NavLink href="/">
        <RadzenButton Icon="home" ButtonStyle=ButtonStyle.Light MouseEnter=@(elem => TooltipService.Open(elem, "Home", _tooltipOptionsBottom)) />
    </NavLink>

    <RadzenAutoComplete ValueChanged=@OnAutoCompleteValueChanged Data=@_items.Values TextProperty=Name
                        MinLength=2 class="w-[10rem] 2sm:w-[15rem] sm:w-[20rem] md:w-[25rem]" Placeholder="Search item"
                        FilterOperator=StringFilterOperator.Contains FilterCaseSensitivity=FilterCaseSensitivity.CaseInsensitive>
        <Template>
            <NavLink class="flex items-center space-x-4" href=@($"/{StringUtility.BuildUri(context.Id.ToString(), context.Name, '-' )}")>
                <RadzenImage Path="@context.Icon" />
                <RadzenText Text="@context.Name" />
            </NavLink>
        </Template>
    </RadzenAutoComplete>

    <ProgressCircle />
</div>

@code {
    private TooltipOptions _tooltipOptionsBottom = new() { Position = TooltipPosition.Bottom };
    private ConcurrentDictionary<int, ItemModel> _items = [];

    /// <summary>
    /// Gets cached items
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _items = ServerService.GetCachedItems();
    }

    /// <summary>
    /// Navigates to item page on auto complete value changed
    /// </summary>
    private void OnAutoCompleteValueChanged(string itemName)
    {
        ItemModel? item = ServerService.GetCachedItem(itemName);

        if (item is null)
            return;

        NavigationManager.NavigateTo($"/{StringUtility.BuildUri(item.Id.ToString(), item.Name, '-')}");
    }
}
