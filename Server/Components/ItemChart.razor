<ELine Option=_chartOption class="mt-[3rem] h-[400px]" />

@inject IWebHostEnvironment Environment
@inject IJSRuntime JSRuntime

@code {
    [Parameter]
    public TimeSeriesModel? TimeSeries { get; set; }

    [Parameter]
    public string ActiveTimeSeriesInterval { get; set; } = "5m";

    private EChartsOption<OptionsLine.Line>? _chartOption;
    private DateTime _clientLocalTime = DateTime.UtcNow;
    private TimeZoneInfo _clientTimeZone = TimeZoneInfo.Utc;
    private string? _rawJsTooltipFormatter;
    private string? _rawJsYAxisLabelFormatter;

    /// <summary>
    /// Initializes chart option
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (TimeSeries is null)
            return;

        _rawJsTooltipFormatter = (await File.ReadAllTextAsync(Path.Combine(Environment.WebRootPath, "eChartsTooltipFormatter.js"))).Replace("\"use strict\";", "");
        _rawJsYAxisLabelFormatter = (await File.ReadAllTextAsync(Path.Combine(Environment.WebRootPath, "eChartsYAxisLabelFormatter.js"))).Replace("\"use strict\";", "");

        _chartOption = new()
            {
                Animation = true,
                TextStyle = new() { Color = "#f6f7fa", FontFamily = "Poppins" },
                Legend = new()
                {
                    Top = 10,
                    Data = new[] 
                    {
                    new { Name = "Insta Buy Price", Icon = "circle" },
                    new { Name = "Insta Sell Price", Icon = "circle" },
                    new { Name = "Insta Buy Volume", Icon = "roundRect" },
                    new { Name ="Insta Sell Volume", Icon = "roundRect" }
                    },
                    TextStyle = new() { Color = "#f6f7fa" },
                    InactiveColor = "#cccccc",
                    ItemGap = 30
                },
                Tooltip = new()
                {
                    Trigger = TooltipTrigger.Axis,
                    AxisPointer = new() { Type = AxisPointerType.Shadow },
                    BorderColor = "#cccccc",
                    Padding = 10,
                    Formatter = new JFunc() { RAW = _rawJsTooltipFormatter }
                },
                AxisPointer = new()
                {
                    Link = new() { XAxisIndex = "all" }
                },
                Grid = [
                    new() {Left = "10%", Right = "10%", Height = "40%"},
                    new() {Left = "10%", Right = "10%", Top = "65%", Height = "10%"},
                    new() {Left = "10%", Right = "10%", Top = "75%", Height = "10%"},
                ],
                XAxis = [
                    new() {
                        Type = AxisType.Category,
                        BoundaryGap = true
                    },
                    new()
                    {
                        Type = AxisType.Category,
                        GridIndex = 1,
                        AxisLabel = new(){ Show = false },
                        BoundaryGap = true
                    },
                    new()
                    {
                        Type = AxisType.Category,
                        GridIndex = 2,
                        AxisLabel = new() { Show = false },
                        BoundaryGap = true
                    }],
                YAxis = [
                    new(){
                        Scale = true,
                        AxisLabel = new(){ Formatter = new JFunc() { RAW = _rawJsYAxisLabelFormatter } }
                    },
                    new(){
                        Scale = true, GridIndex = 1,
                        SplitNumber = 2,
                        SplitLine = new(){ Show = false },
                        AxisLabel = new(){ Formatter = new JFunc() { RAW = _rawJsYAxisLabelFormatter } }
                    },
                    new(){
                        Scale = true,
                        GridIndex = 2,
                        SplitNumber = 2,
                        SplitLine = new(){ Show = false },
                        AxisLabel = new(){ Formatter = new JFunc() { RAW = _rawJsYAxisLabelFormatter } },
                        Inverse = true
                    }],
                DataZoom = [
                    new DataZoom("inside")
                    {
                        XAxisIndex = new[] { 0, 1, 2 },
                        Start = 0,
                        End = 100,
                        Realtime = true,
                    },
                    new DataZoom("slider")
                    {
                        XAxisIndex = new[] { 0, 1, 2 },
                        Start = 0,
                        End = 100,
                        Realtime = true
                    }],
                Series = [
                    new OptionsLine.Line() {
                        Name = "Insta Buy Price",
                        Type = "line",
                        ConnectNulls = true,
                        LineStyle = new(){ Color = "#22bb33" },
                        ItemStyle = new(){ Color = "#22bb33" },
                        ShowSymbol = false
                    },
                    new OptionsLine.Line() {
                        Name = "Insta Sell Price",
                        Type = "line",
                        ConnectNulls = true,
                        LineStyle = new(){ Color = "#dd1144" },
                        ItemStyle = new(){ Color = "#dd1144" },
                        ShowSymbol = false
                    },
                     new OptionsBar.Bar() {
                        Name = "Insta Buy Volume",
                        Type = "bar",
                        ItemStyle = new() { Color = "#00b3e1" },
                        XAxisIndex = 1,
                        YAxisIndex = 1
                    },
                    new OptionsBar.Bar() {
                        Name = "Insta Sell Volume",
                        Type = "bar",
                        ItemStyle = new() { Color = "#e86100" },
                        XAxisIndex = 2,
                        YAxisIndex = 2
                    }]
            };

        await base.OnInitializedAsync();
    }

    /// <summary>
    /// Updates chart option with time series data
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        if (_chartOption is null || TimeSeries?.Data is null)
            return;

        await UpdateClientTimeInfo();

        foreach (XAxis xAxis in _chartOption.XAxis)
            xAxis.Data = TimeSeries.Data.Select(timeSeries => NumericUtility.FormatSecondsToRelativeDateTime(
                timeSeries.Timestamp, _clientLocalTime, _clientTimeZone, ActiveTimeSeriesInterval));

        (_chartOption.Series[0] as OptionsLine.Line)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.AvgHighPrice);
        (_chartOption.Series[1] as OptionsLine.Line)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.AvgLowPrice);
        (_chartOption.Series[2] as OptionsBar.Bar)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.HighPriceVolume);
        (_chartOption.Series[3] as OptionsBar.Bar)!.Data = TimeSeries.Data.Select(timeSeries => timeSeries.LowPriceVolume);

        await InvokeAsync(StateHasChanged);
        await base.OnParametersSetAsync();
    }

    /// <summary>
    /// Updates client local time and time zone
    /// </summary>
    private async Task UpdateClientTimeInfo()
    {
        (DateTime? datetime, TimeZoneInfo? timezone) = await DateTimeUtility.GetClientLocalTime(JSRuntime);

        if (datetime is not null)
            _clientLocalTime = datetime.Value;

        if (timezone is not null)
            _clientTimeZone = timezone;
    }
}
